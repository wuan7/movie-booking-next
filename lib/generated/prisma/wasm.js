
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  imageUrl: 'imageUrl',
  imagePublicId: 'imagePublicId',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  imagePublicId: 'imagePublicId'
};

exports.Prisma.BrandScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  companyId: 'companyId'
};

exports.Prisma.RoomScalarFieldEnum = {
  id: 'id',
  name: 'name',
  brandId: 'brandId',
  totalSeats: 'totalSeats',
  description: 'description',
  roomType: 'roomType'
};

exports.Prisma.RowScalarFieldEnum = {
  id: 'id',
  rowNumber: 'rowNumber',
  rowName: 'rowName',
  roomId: 'roomId'
};

exports.Prisma.SeatScalarFieldEnum = {
  id: 'id',
  seatCode: 'seatCode',
  rowName: 'rowName',
  seatType: 'seatType',
  centerType: 'centerType',
  rowId: 'rowId'
};

exports.Prisma.ShowtimeScalarFieldEnum = {
  id: 'id',
  movieId: 'movieId',
  companyId: 'companyId',
  brandId: 'brandId',
  roomId: 'roomId',
  startTime: 'startTime',
  endTime: 'endTime',
  showDate: 'showDate'
};

exports.Prisma.ShowtimeRowScalarFieldEnum = {
  id: 'id',
  showtimeId: 'showtimeId',
  rowName: 'rowName'
};

exports.Prisma.ShowtimeSeatScalarFieldEnum = {
  id: 'id',
  seatNumber: 'seatNumber',
  seatCode: 'seatCode',
  seatType: 'seatType',
  centerType: 'centerType',
  status: 'status',
  rowId: 'rowId'
};

exports.Prisma.SeatPriceScalarFieldEnum = {
  id: 'id',
  showtimeId: 'showtimeId',
  seatType: 'seatType',
  price: 'price'
};

exports.Prisma.MovieScalarFieldEnum = {
  id: 'id',
  title: 'title',
  nameUnsigned: 'nameUnsigned',
  slug: 'slug',
  description: 'description',
  imageUrl: 'imageUrl',
  imagePublicId: 'imagePublicId',
  trailerUrl: 'trailerUrl',
  director: 'director',
  duration: 'duration',
  status: 'status',
  ageRating: 'ageRating',
  releaseDate: 'releaseDate',
  nationId: 'nationId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nameUnsigned: 'nameUnsigned',
  slug: 'slug'
};

exports.Prisma.GenreScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nameUnsigned: 'nameUnsigned',
  slug: 'slug'
};

exports.Prisma.MovieGenreScalarFieldEnum = {
  movieId: 'movieId',
  genreId: 'genreId'
};

exports.Prisma.CastScalarFieldEnum = {
  id: 'id',
  name: 'name',
  imageUrl: 'imageUrl'
};

exports.Prisma.MovieCastScalarFieldEnum = {
  movieId: 'movieId',
  castId: 'castId'
};

exports.Prisma.TicketScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  showtimeSeatId: 'showtimeSeatId',
  showtimeId: 'showtimeId',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  showtimeId: 'showtimeId',
  totalPrice: 'totalPrice',
  createdAt: 'createdAt'
};

exports.Prisma.PostCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nameUnsigned: 'nameUnsigned',
  slug: 'slug'
};

exports.Prisma.ArticleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  slug: 'slug',
  creator: 'creator',
  imageUrl: 'imageUrl',
  imagePublicId: 'imagePublicId',
  readingTime: 'readingTime',
  postCategoryId: 'postCategoryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  movieId: 'movieId',
  rating: 'rating',
  comment: 'comment',
  imageUrl: 'imageUrl',
  imagePublicId: 'imagePublicId',
  createdAt: 'createdAt'
};

exports.Prisma.BannerScalarFieldEnum = {
  id: 'id',
  movieId: 'movieId',
  active: 'active',
  imageUrl: 'imageUrl',
  imagePublicId: 'imagePublicId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

exports.RoomType = exports.$Enums.RoomType = {
  TWO_D: 'TWO_D',
  THREE_D: 'THREE_D',
  IMAX: 'IMAX',
  FOUR_DX: 'FOUR_DX'
};

exports.SeatType = exports.$Enums.SeatType = {
  STANDARD: 'STANDARD',
  FOUR_DX: 'FOUR_DX',
  VIP: 'VIP',
  COUPLE: 'COUPLE',
  EMPTY: 'EMPTY'
};

exports.CenterType = exports.$Enums.CenterType = {
  FIRST_LEFT: 'FIRST_LEFT',
  FIRST_RIGHT: 'FIRST_RIGHT',
  FIRST_MIDDLE: 'FIRST_MIDDLE',
  MIDDLE_LEFT: 'MIDDLE_LEFT',
  MIDDLE_MIDDLE: 'MIDDLE_MIDDLE',
  MIDDLE_RIGHT: 'MIDDLE_RIGHT',
  LAST_LEFT: 'LAST_LEFT',
  LAST_MIDDLE: 'LAST_MIDDLE',
  LAST_RIGHT: 'LAST_RIGHT',
  NOMAL: 'NOMAL'
};

exports.MovieStatus = exports.$Enums.MovieStatus = {
  NOW_SHOWING: 'NOW_SHOWING',
  COMING_SOON: 'COMING_SOON',
  STOPPED: 'STOPPED'
};

exports.AgeRating = exports.$Enums.AgeRating = {
  P: 'P',
  C13: 'C13',
  C16: 'C16',
  C18: 'C18'
};

exports.TicketStatus = exports.$Enums.TicketStatus = {
  BOOKED: 'BOOKED',
  CANCELLED: 'CANCELLED',
  PAID: 'PAID'
};

exports.Prisma.ModelName = {
  User: 'User',
  Account: 'Account',
  Company: 'Company',
  Brand: 'Brand',
  Room: 'Room',
  Row: 'Row',
  Seat: 'Seat',
  Showtime: 'Showtime',
  ShowtimeRow: 'ShowtimeRow',
  ShowtimeSeat: 'ShowtimeSeat',
  SeatPrice: 'SeatPrice',
  Movie: 'Movie',
  Nation: 'Nation',
  Genre: 'Genre',
  MovieGenre: 'MovieGenre',
  Cast: 'Cast',
  MovieCast: 'MovieCast',
  Ticket: 'Ticket',
  Booking: 'Booking',
  PostCategory: 'PostCategory',
  Article: 'Article',
  Review: 'Review',
  Banner: 'Banner'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
